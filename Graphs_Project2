import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
url = 'abalone.data'  # Update with the correct path if needed
columns = ['Sex', 'Length', 'Diameter', 'Height', 'Whole_weight', 'Shucked_weight', 'Viscera_weight', 'Shell_weight', 'Rings']
data = pd.read_csv(url, names=columns)

# Convert categorical 'Sex' column to numerical using one-hot encoding
data = pd.get_dummies(data, columns=['Sex'], drop_first=True)

# Features and target
X = data.drop('Rings', axis=1)
y = data['Rings']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Decision Tree Regression model
model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R² Score: {r2:.2f}')

# Visualization: Scatter Plot of Actual vs. Predicted Ages
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='green', alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--', color='red')  # Ideal line
plt.title('Actual vs. Predicted Ages (Decision Tree Regression)')
plt.xlabel('Actual Age (Rings)')
plt.ylabel('Predicted Age (Rings)')
plt.xlim([0, 30])  # Adjust as necessary based on the data
plt.ylim([0, 30])  # Adjust as necessary based on the data
plt.grid(True)
plt.show()


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
url = 'abalone.data'  # Update with the correct path if needed
columns = ['Sex', 'Length', 'Diameter', 'Height', 'Whole_weight', 'Shucked_weight', 'Viscera_weight', 'Shell_weight', 'Rings']
data = pd.read_csv(url, names=columns)

# Convert categorical 'Sex' column to numerical using one-hot encoding
data = pd.get_dummies(data, columns=['Sex'], drop_first=True)

# Features and target
X = data.drop('Rings', axis=1)
y = data['Rings']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Decision Tree Regression model
model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R² Score: {r2:.2f}')

# Visualization: Scatter Plot of Actual vs. Predicted Ages
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='green', alpha=0.6)
plt.plot([y.min(), y.max()], [y.min(), y.max()], '--', color='red')  # Ideal line
plt.title('Actual vs. Predicted Ages (Decision Tree Regression)')
plt.xlabel('Actual Age (Rings)')
plt.ylabel('Predicted Age (Rings)')
plt.xlim([0, 30])  # Adjust as necessary based on the data
plt.ylim([0, 30])  # Adjust as necessary based on the data
plt.grid(True)
plt.show()
